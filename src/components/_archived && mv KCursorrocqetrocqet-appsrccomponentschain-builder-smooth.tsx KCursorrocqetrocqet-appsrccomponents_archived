'use client';

import React, { useState } from 'react';
import { Reorder, motion } from 'framer-motion';
import { nanoid } from 'nanoid';
import { 
  Plus, Trash2, GripVertical, Save, Play, Settings, X,
  FileJson, Globe, Database, Code, Webhook, GitBranch,
  Edit2, Check, Sparkles
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { cn } from '@/lib/utils';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';

interface ChainStep {
  id: string;
  type: string;
  name: string;
  promptId?: string;
  promptName?: string;
  outputVariable?: string;
  config?: any;
  isConfiguring?: boolean;
}

const STEP_TYPES = [
  { value: 'prompt', label: 'Prompt', icon: FileJson },
  { value: 'api_call', label: 'API Call', icon: Globe },
  { value: 'database', label: 'Database', icon: Database },
  { value: 'webhook', label: 'Webhook', icon: Webhook },
  { value: 'condition', label: 'Condition', icon: GitBranch },
  { value: 'code', label: 'Code', icon: Code },
];

interface ChainBuilderAutoAnimateProps {
  workspaceId: string;
  workspaceSlug: string;
  availablePrompts?: any[];
  mode: 'create' | 'edit';
  existingChain?: any;
}

export default function ChainBuilderAutoAnimate({
  workspaceId,
  workspaceSlug,
  availablePrompts = [],
  mode,
  existingChain
}: ChainBuilderAutoAnimateProps) {
  const router = useRouter();
  const [chainName, setChainName] = useState(existingChain?.name || '');
  const [description, setDescription] = useState(existingChain?.description || '');
  const [steps, setSteps] = useState<ChainStep[]>(existingChain?.steps || [
    { id: '1', type: 'prompt', name: 'First Step', outputVariable: 'step1Output' },
    { id: '2', type: 'api_call', name: 'API Call', outputVariable: 'apiResult' },
    { id: '3', type: 'database', name: 'Database Query', outputVariable: 'queryResult' },
  ]);

  const addStep = (type: string) => {
    const newStep: ChainStep = {
      id: nanoid(),
      type,
      name: `New ${type} step`,
      outputVariable: `step${steps.length + 1}Output`,
    };
    setSteps([...steps, newStep]);
  };

  const deleteStep = (id: string) => {
    setSteps(steps.filter(s => s.id !== id));
  };

  const saveChain = async () => {
    if (!chainName) {
      toast.error('Please enter a chain name');
      return;
    }
    toast.success(`Chain ${mode === 'create' ? 'created' : 'updated'} successfully`);
  };

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-950">
      {/* Header */}
      <div className="bg-white dark:bg-neutral-900 border-b border-neutral-200 dark:border-neutral-800 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex-1 max-w-2xl">
            <Input
              value={chainName}
              onChange={(e) => setChainName(e.target.value)}
              placeholder="Chain name..."
              className="text-lg font-semibold mb-2"
            />
            <Input
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Description (optional)..."
              className="text-sm"
            />
          </div>
          <div className="flex gap-2">
            <Button onClick={saveChain}>
              <Save className="w-4 h-4 mr-2" />
              Save
            </Button>
            <Button variant="outline">
              <Play className="w-4 h-4 mr-2" />
              Test
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="p-8 max-w-4xl mx-auto">
        {/* Steps with Reorder */}
        {steps.length === 0 ? (
          <div className="text-center py-16 bg-white dark:bg-neutral-900 rounded-2xl border-2 border-dashed border-neutral-300 dark:border-neutral-700 mb-8">
            <Sparkles className="w-12 h-12 text-neutral-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No steps yet</h3>
            <p className="text-neutral-500 mb-6">Add your first step to get started</p>
          </div>
        ) : (
          <Reorder.Group 
            axis="y" 
            values={steps} 
            onReorder={setSteps}
            className="space-y-3 mb-8"
          >
            {steps.map((step) => (
              <Reorder.Item 
                key={step.id} 
                value={step}
                id={step.id}
                className="relative"
                whileDrag={{
                  scale: 1.02,
                  boxShadow: "0 20px 40px rgba(0,0,0,0.15)",
                  zIndex: 100,
                }}
                transition={{
                  layout: {
                    type: "spring",
                    damping: 25,
                    stiffness: 300
                  }
                }}
              >
                <motion.div 
                  layout
                  className="bg-white dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-800 rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow group"
                >
                  <div className="flex items-center gap-3">
                    {/* Drag Handle */}
                    <div className="cursor-grab active:cursor-grabbing opacity-40 hover:opacity-100 transition-opacity">
                      <GripVertical className="w-5 h-5 text-neutral-500" />
                    </div>

                    {/* Step Icon & Info */}
                    <div className="flex-1 flex items-center gap-3">
                      {(() => {
                        const stepType = STEP_TYPES.find(t => t.value === step.type);
                        const Icon = stepType?.icon || Settings;
                        return (
                          <div className="w-10 h-10 bg-neutral-100 dark:bg-neutral-800 rounded-lg flex items-center justify-center">
                            <Icon className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
                          </div>
                        );
                      })()}
                      
                      <div className="flex-1">
                        <h3 className="font-medium">{step.name}</h3>
                        <p className="text-sm text-neutral-500">
                          {step.type.charAt(0).toUpperCase() + step.type.slice(1).replace('_', ' ')}
                        </p>
                      </div>

                      {step.outputVariable && (
                        <div className="text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400 px-2 py-1 rounded">
                          â†’ {step.outputVariable}
                        </div>
                      )}
                    </div>

                    {/* Actions */}
                    <div className="flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8"
                        onClick={() => console.log('Edit', step.id)}
                      >
                        <Edit2 className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8 hover:bg-red-50 dark:hover:bg-red-900/20"
                        onClick={() => deleteStep(step.id)}
                      >
                        <Trash2 className="w-4 h-4 text-red-500" />
                      </Button>
                    </div>
                  </div>
                </motion.div>
              </Reorder.Item>
            ))}
          </Reorder.Group>
        )}

        {/* Add Step Buttons */}
        <div className="bg-white dark:bg-neutral-900 rounded-xl p-4 border border-neutral-200 dark:border-neutral-800">
          <h3 className="text-sm font-medium mb-3">Add Step</h3>
          <div className="grid grid-cols-3 gap-2">
            {STEP_TYPES.map((type) => {
              const Icon = type.icon;
              return (
                <button
                  key={type.value}
                  onClick={() => addStep(type.value)}
                  className="flex items-center gap-2 px-3 py-2 rounded-lg border border-neutral-200 dark:border-neutral-700 hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                >
                  <Icon className="w-4 h-4" />
                  <span className="text-sm">{type.label}</span>
                </button>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}